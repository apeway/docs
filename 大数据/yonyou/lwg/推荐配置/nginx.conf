#工作进程数，建议设置为CPU的总核数

worker_processes  16;

#全局错误日志定义类型，日志等级从低到高依次为：

#debug | info | notice | warn | error | crit

error_log  logs/error.log  info;

#记录主进程ID的文件

pid        nginx.pid;

#一个进程能打开的文件描述符最大值，理论上该值因该是最多能打开的文件数除以进程数。

#但是由于nginx负载并不是完全均衡的，所以这个值最好等于最多能打开的文件数。

#LINUX系统可以执行 sysctl -a | grep fs.file 可以看到linux文件描述符。

worker_rlimit_nofile 65535;

#连接数上限， 单个进程允许的最大连接数

events {   

    worker_connections  65535;

}

#设定http服务器，利用它的反向代理功能提供负载均衡支持

http {

    #文件扩展名与文件类型映射表

    include       mime.types;

    #默认文件类型

    default_type  application/octet-stream;

    #日志格式

    log_format  main  $status][$remote_addr][$request_method][$request_time][$request_uri][$time_iso8601][$body_bytes_sent][$upstream_addr;

    #access log 记录了哪些用户，哪些页面以及用户浏览器、ip和其他的访问信息

    access_log  logs/access.log  main;

    #服务器名字的hash表大小

    server_names_hash_bucket_size 128;

    #客户端请求头缓冲大小。

    #nginx默认会用client_header_buffer_size这个buffer来读取header值，

    #如果header过大，它会使用large_client_header_buffers来读取。

    #如果设置过小HTTP头/Cookie过大 会报400 错误 nginx 400 bad request

    #如果超过buffer，就会报HTTP 414错误(URI Too Long)

    #nginx接受最长的HTTP头部大小必须比其中一个buffer大

    #否则就会报400的HTTP错误(Bad Request)

    client_header_buffer_size 32k;

    large_client_header_buffers 4 32k;

    #客户端请求体的大小

    client_body_buffer_size    8m;

    #隐藏ngnix版本号

    server_tokens off;

    #忽略不合法的请求头

    ignore_invalid_headers   on;

    #指定启用除第一条error_page指令以外其他的error_page。

    recursive_error_pages    on;

    #让 nginx 在处理自己内部重定向时不默认使用  server_name 设置中的第一个域名

    server_name_in_redirect off;

    #开启文件传输，一般应用都应设置为on；若是有下载的应用，则可以设置成off来平衡网络I/O和磁盘的I/O来降低系统负载

    sendfile  on;

    #告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。

    tcp_nopush  on;

    #告诉nginx不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，

    #这样发送一小块数据信息时就不能立即得到返回值。

    tcp_nodelay    on;

    #长连接超时时间，单位是秒

    keepalive_timeout  65;

    #gzip模块设置，使用 gzip 压缩可以降低网站带宽消耗，同时提升访问速度。

    gzip  on;             #开启gzip

    gzip_min_length  1k;          #最小压缩大小

    gzip_buffers     4 16k;        #压缩缓冲区

    gzip_http_version 1.0;       #压缩版本

    gzip_comp_level 2;            #压缩等级

    gzip_types   text/plain application/x-javascript text/css application/xml;           #压缩类型

    #upstream作负载均衡，在此配置需要轮询的服务器地址和端口号，max_fails为允许请求失败的次数，默认为1.

    #weight为轮询权重，根据不同的权重分配可以用来平衡服务器的访问率。
    
    #微信云版服务
    upstream backserver {
        server 172.20.17.246:8081 max_fails=0 weight=10;
        server 172.20.17.247:8081 max_fails=0 weight=10;
        sticky;
    }		

    server {
        if ($time_iso8601 ~ "(\d{4})-(\d{2})-(\d{2})") {
            set $time $1-$2-$3;
        } 
        #监听端口
        listen       80;
        access_log  logs/${time}.log  main;        
        #自己指定要访问的域名
        server_name  server1;
        #字符集
        charset utf-8;
        #后端服务
        location ~ /(bq_self|console)/.*
        { 
            proxy_pass     http://backserver;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;  
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_http_version 1.1;	
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;  
            proxy_max_temp_file_size 0;  
            proxy_connect_timeout      3600;  
            proxy_send_timeout         3600;  
            proxy_read_timeout         3600;  
            proxy_buffer_size          4k;  
            proxy_buffers              4 32k;  
            proxy_busy_buffers_size    64k;  
            proxy_temp_file_write_size 64k;
            client_max_body_size  500m;
        } 	
        #后端服务
        location ~ /(portal|aemeta|bqchart|help|lfw|uapjs|uapws)/.*
        { 
            proxy_pass     http://bq.yonyou.com:82;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;  
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_http_version 1.1;	
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;  
            proxy_max_temp_file_size 0;  
            proxy_connect_timeout      3600;  
            proxy_send_timeout         3600;  
            proxy_read_timeout         3600;  
            proxy_buffer_size          4k;  
            proxy_buffers              4 32k;  
            proxy_busy_buffers_size    64k;  
            proxy_temp_file_write_size 64k;
            client_max_body_size  500m;
        } 	
        location ~ /(desktop|bq|res_common|res_console|web|mobile|demo|contact)/.*
        { 
            root   html;
            index  index.html index.htm;
            expires      7d; 
        } 
        location ~ .*\.(txt)$
        { 
            root   html;
            index  index.html index.htm;
            expires      7d; 
        } 
        #后端服务
        location /
        { 
            proxy_pass     http://backserver;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;  
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_http_version 1.1;	
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;  
            proxy_max_temp_file_size 0;  
            proxy_connect_timeout      3600;  
            proxy_send_timeout         3600;  
            proxy_read_timeout         3600;  
            proxy_buffer_size          4k;  
            proxy_buffers              4 32k;  
            proxy_busy_buffers_size    64k;  
            proxy_temp_file_write_size 64k;
            client_max_body_size  500m;
        } 	
          
        #启用nginx status 监听页面
        location /nginxstatus {
            stub_status on;
            access_log on;
        }
        #错误页面
        error_page   404  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

               
}

